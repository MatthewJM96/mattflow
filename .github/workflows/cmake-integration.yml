name: CMake Build on Ubuntu, Windows and MacOS

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:

#################
#     Linux     #
#################

  build-linux:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: true

      matrix:
        build_type: [Release, Debug]
        c_compiler: [gcc-14, clang-18]
        include:
          - c_compiler: gcc-14
            cpp_compiler: g++-14
          - c_compiler: clang-18
            cpp_compiler: clang++-18

    steps:
    - uses: actions/checkout@v4.2.0

    - name: Install system dependencies
      run: >
        sudo add-apt-repository universe ;
        sudo apt update ;
        sudo apt install g++-14 gcc-14 ;
        wget https://apt.llvm.org/llvm.sh ;
        chmod u+x llvm.sh ;
        sudo ./llvm.sh 18

    - name: Install conan
      run: >
        python3 -m venv ${{ github.workspace }}/.venv ;
        source ${{ github.workspace }}/.venv/bin/activate ;
        pip install conan==2.7.1 ;
        conan profile detect

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: >
        echo "home=$HOME" >> "$GITHUB_OUTPUT" ;
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Cache conan dependencies
      id: cache-conan
      uses: actions/cache@v4.0.2
      env:
        cache-name: cache-conan
      with:
        path: ${{ steps.strings.outputs.home }}/.conan2
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}-${{ hashFiles('CMakeLists.txt') }}

    - name: Configure CMake
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DRUNNER=1
        -S ${{ github.workspace }}

    - name: Build
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        ctest --build ${{ steps.strings.outputs.build-output-dir }}
        --build-config ${{ matrix.build_type }} 
        --output-on-failure

###################
#     Windows     #
###################

  build-windows:
    runs-on: windows-2022

    strategy:
      # TODO: Set to true once Windows building works well.
      fail-fast: false

      matrix:
        build_type: [Release, Debug]

    steps:
    - uses: actions/checkout@v4.2.0

    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1.3.1

    - name: Install conan
      run: >
        python3 -m venv ${{ github.workspace }}\.venv ;
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        pip install conan==2.7.1 ;
        conan profile detect

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      run: >
        echo "home=$HOME" >> $env:GITHUB_OUTPUT ;
        echo "build-output-dir=${{ github.workspace }}\build" >> $env:GITHUB_OUTPUT

    - name: Cache conan dependencies
      id: cache-conan
      uses: actions/cache@v4.0.2
      env:
        cache-name: cache-conan
      with:
        path: ${{ steps.strings.outputs.home }}/.conan2
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.build_type }}--${{ hashFiles('CMakeLists.txt') }}

    - if: ${{ steps.cache-conan.outputs.cache-hit == 'true' }}
      name: Remove conan system-reqs cache and delete boost conan_sources.tgz
      continue-on-error: true
      run: >
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        conan remove --system-reqs '*' ;
        Get-ChildItem ${{ steps.strings.outputs.home }}\.conan2\data\boost
        -File -Include conan_sources.tgz -Recurse -Force
        | Remove-Item -Recurse -Force

    - name: Configure CMake
      run: >
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=cl
        -DCMAKE_C_COMPILER=cl
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DRUNNER=1
        -S ${{ github.workspace }}

    - name: Build
      run: >
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      run: >
        cd ${{ github.workspace }} ;
        .\.venv\Scripts\activate ;
        ctest --build ${{ steps.strings.outputs.build-output-dir }}
        --build-config ${{ matrix.build_type }} 
        --output-on-failure

#################
#     MacOS     #
#################

  build-macos:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        os: [macos-13, macos-14]
        build_type: [Release, Debug]
        c_compiler: [clang]

    steps:
    - uses: actions/checkout@v4.2.0

    - name: Install conan
      run: >
        python3 -m venv ${{ github.workspace }}/.venv ;
        source ${{ github.workspace }}/.venv/bin/activate ;
        pip install conan==2.7.1 ;
        conan profile detect ;
        sed -i -e 's/"13.0", "13.1", "13.2", "13.3", "13.4", "13.5", "13.6",/"13.0", "13.1", "13.2", "13.3", "13.4", "13.5", "13.6", "13.7",/g' ~/.conan2/settings.yml ;
        sed -i -e 's/"14.0", "14.1", "14.2", "14.3", "14.4", "14.5"]/"14.0", "14.1", "14.2", "14.3", "14.4", "14.5", "14.6", "14.7"]/g' ~/.conan2/settings.yml

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: >
        echo "home=$HOME" >> "$GITHUB_OUTPUT" ;
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Cache conan dependencies
      id: cache-conan
      uses: actions/cache@v4.0.2
      env:
        cache-name: cache-conan
      with:
        path: ${{ steps.strings.outputs.home }}/.conan2
        key: ${{ matrix.os }}-${{ env.cache-name }}-${{ matrix.build_type }}-${{ matrix.c_compiler }}-${{ hashFiles('CMakeLists.txt') }}
  
    - name: Configure CMake
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DRUNNER=1
        -S ${{ github.workspace }}

    - name: Build
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      run: >
        source ${{ github.workspace }}/.venv/bin/activate ;
        ctest --build ${{ steps.strings.outputs.build-output-dir }}
        --build-config ${{ matrix.build_type }} 
        --output-on-failure
